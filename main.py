# -*- coding: utf-8 -*-
"""Main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzLuLNGlxN13s52AxfCna-UC1zKbdeJk
"""

import numpy as np
import tensorflow as tf
import pprint
import os
flags = tf.app.flags

from model import SRCNN
from utils import input_setup

# Training Parameter Setting
flags.DEFINE_integer("epoch", 1000 ,"Number of epoch [1000]")

flags.DEFINE_integer("batch_size", 128, "batch size")
flags.DEFINE_integer("image_size", 33, "The size of image to use [33]")
flags.DEFINE_integer("label_size", 21, "The size of label to produce [21]")

flags.DEFINE_float("learning_rate", 5e-6, "The learning rate of gradient descent algorithm [5e-6]")
flags.DEFINE_integer("c_dim", 1, "Dimension of image color. [1]")
flags.DEFINE_integer("scale", 3, "size scale [3]")

flags.DEFINE_integer("stride", 21, "stride for [21]")
flags.DEFINE_string("checkpoint_dir", "checkpoint", "Name [checkpoint] checkpoint directory")
flags.DEFINE_string("sample_dir", "sample", "sample directory [sample]")
flags.DEFINE_boolean("is_train", False , "True for training, False for testing")
FLAGS = flags.FLAGS
pp = pprint.PrettyPrinter()

def main(_):
  pp.pprint(flags.FLAGS.__flags)
  if not os.path.exists(FLAGS.checkpoint_dir):
    os.makedirs(FLAGS.checkpoint_dir)
  if not os.path.exists(FLAGS.sample_dir):
    os.makedirs(FLAGS.sample_dir)
  with tf.Session() as sess:
    srcnn = SRCNN(sess, 
                  image_size=FLAGS.image_size, 
                  label_size=FLAGS.label_size, 
                  batch_size=FLAGS.batch_size,
                  c_dim=FLAGS.c_dim, 
                  checkpoint_dir=FLAGS.checkpoint_dir,
                  sample_dir=FLAGS.sample_dir)
    srcnn.train(FLAGS)
if __name__ == '__main__':
  tf.app.run()